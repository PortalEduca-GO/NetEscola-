import { GoogleGenerativeAI } from "@google/generative-ai";
import { Quiz, QuizDifficulty, QuizQuestion, VideoRecommendation, AnalysisData, GroundingChunk, SchoolGrade, Bimester, SchoolReportAnalysisResult, SubjectPerformance, Student } from '../types';
import { GEMINI_MODEL_TEXT, DEFAULT_SUBJECT_PERFORMANCE_THRESHOLD, SCHOOL_GRADES_OPTIONS } from "../constants";

type ApiVersion = "v1beta" | "v1";

const aiInstances = new Map<string, GoogleGenerativeAI>();
let apiKeyStatusLogged = false;

// Rate limiting
let lastRequestTime = 0;
const MIN_REQUEST_INTERVAL = 3000; // 3 segundos entre requests para m√°xima estabilidade

// Controle de requests simult√¢neos
let activeRequests = 0;
const MAX_CONCURRENT_REQUESTS = 1; // Apenas 1 request por vez

// Fun√ß√£o para aguardar intervalo m√≠nimo entre requests
async function waitForRateLimit() {
  // Aguarda at√© que haja slot dispon√≠vel para requests
  while (activeRequests >= MAX_CONCURRENT_REQUESTS) {
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  const now = Date.now();
  const timeSinceLastRequest = now - lastRequestTime;
  
  if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {
    const waitTime = MIN_REQUEST_INTERVAL - timeSinceLastRequest;
    await new Promise(resolve => setTimeout(resolve, waitTime));
  }
  
  activeRequests++;
  lastRequestTime = Date.now();
}

// Fun√ß√£o para liberar slot de request
function releaseRequest() {
  activeRequests = Math.max(0, activeRequests - 1);
}

// Fun√ß√£o de retry com backoff exponencial
async function retryWithBackoff<T>(
  fn: () => Promise<T>, 
  maxRetries: number = 3, 
  baseDelay: number = 1000
): Promise<T> {
  let lastError: Error;
  
  for (let i = 0; i <= maxRetries; i++) {
    try {
      if (i > 0) {
        const delay = baseDelay * Math.pow(2, i - 1);
        console.log(`Tentativa ${i + 1}/${maxRetries + 1} ap√≥s ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      await waitForRateLimit();
      const result = await fn();
      releaseRequest(); // Libera o slot ap√≥s sucesso
      return result;
    } catch (error) {
      releaseRequest(); // Libera o slot ap√≥s erro
      lastError = error as Error;
      console.warn(`Erro na tentativa ${i + 1}:`, error);
      
      // Se n√£o √© erro de rate limit, n√£o retry
      if (!error.message?.includes('429') && !error.message?.includes('quota')) {
        break;
      }
    }
  }
  
  throw lastError;
}

// Inicializa a inst√¢ncia da IA de forma pregui√ßosa (lazy) para evitar crash na inicializa√ß√£o
function getConfiguredApiKeys(): { key: string; label: string }[] {
  const configuredKeys: { key: string; label: string }[] = [];
  const primaryKey = import.meta.env.VITE_GEMINI_API_KEY || import.meta.env.VITE_API_KEY;
  const backupKey = import.meta.env.VITE_GEMINI_API_KEY_BACKUP;

  if (!apiKeyStatusLogged) {
    console.log("üîë API Key principal:", primaryKey ? `Sim (primeiros 10 chars: ${primaryKey.substring(0, 10)}...)` : "N√£o encontrada");
    console.log("üîë API Key backup:", backupKey ? `Sim (primeiros 10 chars: ${backupKey.substring(0, 10)}...)` : "N√£o encontrada");
    if (!primaryKey && !backupKey) {
      console.warn("‚ö†Ô∏è Nenhuma API key do Gemini encontrada - funcionalidade de IA desabilitada");
    }
    apiKeyStatusLogged = true;
  }

  if (primaryKey) {
    configuredKeys.push({ key: primaryKey, label: "principal" });
  }

  if (backupKey && backupKey !== primaryKey) {
    configuredKeys.push({ key: backupKey, label: "backup" });
  }

  return configuredKeys;
}

function getCachedClient(apiKey: string): GoogleGenerativeAI {
  if (!aiInstances.has(apiKey)) {
    const client = new GoogleGenerativeAI(apiKey);
    aiInstances.set(apiKey, client);
    console.log(`‚úÖ Inst√¢ncia do GoogleGenerativeAI criada`);
  }
  return aiInstances.get(apiKey)!;
}

function getAvailableAiClients(): { client: GoogleGenerativeAI; label: string; requestOptions?: { apiVersion: ApiVersion } }[] {
  const keys = getConfiguredApiKeys();
  const clients: { client: GoogleGenerativeAI; label: string; requestOptions?: { apiVersion: ApiVersion } }[] = [];
  const versions: ApiVersion[] = ["v1beta", "v1"];

  for (const { key, label } of keys) {
    for (const version of versions) {
      try {
        const client = getCachedClient(key);
        const requestOptions = version === "v1beta" ? undefined : { apiVersion: version };
        clients.push({ client, label: `${label} (${version})`, requestOptions });
      } catch (error) {
        console.error(`‚ùå Erro ao inicializar cliente ${label} (${version}):`, error);
      }
    }
  }

  return clients;
}

function isAiConfigured(): boolean {
  return getConfiguredApiKeys().length > 0;
}

async function tryMultipleModels(prompt: string): Promise<string> {
  const apiClients = getAvailableAiClients();

  if (apiClients.length === 0) {
    throw new Error("IA n√£o dispon√≠vel - nenhuma chave da API configurada");
  }
  
  const modelsToTry = [
    'gemini-2.5-flash',
    'gemini-2.5-flash-preview-09-2025',
    'gemini-flash-latest',
    'gemini-1.5-flash',
    'gemini-1.5-pro',
    'gemini-1.0-pro'
  ];
  
  // Tenta cada combina√ß√£o de API key + modelo
  for (const { client, label, requestOptions } of apiClients) {
    for (const modelName of modelsToTry) {
      try {
        console.log(`Tentando modelo: ${modelName} com cliente ${label}`);
        const model = client.getGenerativeModel({ model: modelName }, requestOptions);
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const text = response.text();
        console.log(`‚úÖ Modelo ${modelName} funcionou com cliente ${label}!`);
        return text;
      } catch (error: any) {
        console.warn(`‚ùå Modelo ${modelName} com cliente ${label} falhou:`, error.message);
        // Continua para o pr√≥ximo modelo/chave
      }
    }
  }
  
  throw new Error("Todos os modelos do Gemini falharam com todas as API keys. Funcionalidade de IA indispon√≠vel.");
}

export async function generateQuizForVideo(videoTitle: string, videoSubject: string, difficulty: QuizDifficulty): Promise<QuizQuestion[] | null> {
  // Verificar se IA est√° dispon√≠vel antes de tentar usar
  if (!isAiConfigured()) {
    console.log('IA n√£o dispon√≠vel, pulando gera√ß√£o de quiz');
    return null;
  }
  let prompt = `Crie um quiz de n√≠vel ${difficulty} sobre o t√≥pico "${videoTitle}" da disciplina de ${videoSubject}. 
O quiz deve ter 3 perguntas de m√∫ltipla escolha, cada uma com 4 op√ß√µes (A, B, C, D) e apenas uma correta.
Forne√ßa a resposta correta e uma breve explica√ß√£o para cada pergunta.
Responda APENAS com um array JSON de objetos, onde cada objeto tem os campos: "question" (string), "options" (array de 4 strings), "correctAnswer" (string, uma das op√ß√µes), e "explanation" (string).
Exemplo de formato para uma pergunta:
{
  "question": "Qual √© a capital da Fran√ßa?",
  "options": ["Berlim", "Madri", "Paris", "Lisboa"],
  "correctAnswer": "Paris",
  "explanation": "Paris √© a capital e maior cidade da Fran√ßa."
}
`;

  if (difficulty === QuizDifficulty.AVANCADO) {
    prompt += "\nAs perguntas avan√ßadas devem exigir um pensamento mais cr√≠tico ou conhecimento mais profundo sobre o tema."
  } else if (difficulty === QuizDifficulty.INICIANTE) {
    prompt += "\nAs perguntas iniciantes devem ser sobre conceitos fundamentais do tema."
  }

  try {
    return await retryWithBackoff(async () => {
      const responseText = await tryMultipleModels(prompt);
      
      let jsonStr = responseText.trim();
      const fenceRegex = /^```(\w*)?\s*\n?(.*?)\n?\s*```$/s;
      const match = jsonStr.match(fenceRegex);
      if (match && match[2]) {
        jsonStr = match[2].trim();
      }

      const parsedData = JSON.parse(jsonStr);
      if (Array.isArray(parsedData) && parsedData.every(item => 'question' in item && 'options' in item && 'correctAnswer' in item && 'explanation' in item)) {
          return parsedData as QuizQuestion[];
      }
      console.error("Failed to parse quiz questions or structure is incorrect:", parsedData);
      return null;
    });
  } catch (error) {
    console.error("Error generating quiz after retries:", error);
    return null;
  }
}

export async function generateVideoJustification(video: VideoRecommendation, analysisData: AnalysisData): Promise<string> {
  // Verificar se IA est√° dispon√≠vel antes de tentar usar
  if (!isAiConfigured()) {
    console.log('IA n√£o dispon√≠vel, usando justifica√ß√£o padr√£o');
    return video.justification || "V√≠deo recomendado para complementar seus estudos.";
  }
  const difficultSubjects = analysisData.performance
    .filter(p => p.grade < DEFAULT_SUBJECT_PERFORMANCE_THRESHOLD) 
    .map(p => p.subject)
    .join(', ');

  const prompt = `
    O aluno est√° na ${analysisData.schoolGrade}, ${analysisData.bimester}. 
    Suas dificuldades identificadas (notas abaixo de ${DEFAULT_SUBJECT_PERFORMANCE_THRESHOLD}/100) s√£o em: ${difficultSubjects || 'Nenhuma dificuldade espec√≠fica destacada, mas buscando aprendizado geral'}.
    O v√≠deo recomendado √© "${video.title}" sobre ${video.subject}. 
    Gere uma justificativa curta e motivadora (2-3 frases) explicando por que este v√≠deo √© uma boa recomenda√ß√£o para este aluno, conectando com suas poss√≠veis dificuldades ou com a relev√¢ncia do tema para sua s√©rie/ano.
    Seja amig√°vel e encorajador.
  `;

  try {
    return await retryWithBackoff(async () => {
      return await tryMultipleModels(prompt);
    }, 1, 1000); // Apenas 1 retry para justificativas, com delay maior
  } catch (error) {
    console.error("Error generating video justification after retries:", error);
    
    // Fallback inteligente baseado na mat√©ria e dificuldades
    if (difficultSubjects.includes(video.subject)) {
      return `Este v√≠deo sobre ${video.subject} foi especialmente selecionado para ajudar voc√™ a fortalecer seus conhecimentos nesta disciplina. Com explica√ß√µes claras e did√°ticas, √© uma √≥tima oportunidade para esclarecer d√∫vidas e melhorar seu desempenho!`;
    }
    
    return `Este v√≠deo sobre ${video.subject} √© perfeito para expandir seus conhecimentos e complementar seus estudos. O conte√∫do √© adequado para sua s√©rie e vai contribuir muito para seu aprendizado!`;
  }
}

export async function generatePerformanceSummary(student: Student, analysisData: AnalysisData): Promise<string> {
  const { performance, bimester } = analysisData;
  const studentFirstName = student.nome.split(' ')[0];

  // Verificar se IA est√° dispon√≠vel antes de tentar usar
  if (!isAiConfigured()) {
    console.log('IA n√£o dispon√≠vel, usando fallback inteligente');
    return generateFallbackSummary(student, analysisData);
  }

  const gradesText = performance.map(p => `${p.subject}: ${(p.grade / 10).toFixed(1)}/10`).join('\n');

  const prompt = `
    Aja como um conselheiro pedag√≥gico amig√°vel e motivador.
    O(A) aluno(a) se chama ${studentFirstName} e est√° na ${student.serie}. Os resultados s√£o do ${bimester}.
    
    Aqui est√£o as notas do(a) aluno(a):
    ${gradesText}

    Com base nessas notas (escala de 0 a 10), escreva um breve resumo de desempenho em 2 par√°grafos:
    1.  **Primeiro par√°grafo:** Comece com um elogio, destacando as 2-3 disciplinas com as notas mais altas. Comente positivamente sobre o bom desempenho nessas √°reas.
    2.  **Segundo par√°grafo:** De forma construtiva e encorajadora, aponte as 1-2 disciplinas que precisam de mais aten√ß√£o (as com notas mais baixas, especialmente abaixo de 6.0). Sugira que focar um pouco mais nessas mat√©rias pode trazer √≥timos resultados. Evite linguagem negativa. Termine com uma frase motivacional.
    
    Seja conciso, positivo e direto.
  `;

  try {
    return await retryWithBackoff(async () => {
      return await tryMultipleModels(prompt);
    });
  } catch (error) {
    console.error("Error generating performance summary after retries:", error);
    // Fallback mais inteligente baseado nos dados
    return generateFallbackSummary(student, analysisData);
  }
}

// Fun√ß√£o auxiliar para gerar resumo de fallback
function generateFallbackSummary(student: Student, analysisData: AnalysisData): string {
  const { performance } = analysisData;
  const studentFirstName = student.nome.split(' ')[0];

  const bestSubjects = performance
    .sort((a, b) => b.grade - a.grade)
    .slice(0, 3)
    .map(p => p.subject);
  
  const worstSubjects = performance
    .filter(p => p.grade < 60)
    .sort((a, b) => a.grade - b.grade)
    .slice(0, 2)
    .map(p => p.subject);

  return `Parab√©ns, ${studentFirstName}! Voc√™ est√° se destacando em ${bestSubjects.join(', ')}, mostrando sua dedica√ß√£o e interesse por essas √°reas. ${worstSubjects.length > 0 ? `Para alcan√ßar ainda melhores resultados, que tal dedicar um pouco mais de aten√ß√£o √†s disciplinas de ${worstSubjects.join(' e ')}? Com um pouquinho mais de foco nessas mat√©rias, tenho certeza que voc√™ vai conseguir excelentes resultados!` : 'Continue assim, voc√™ est√° no caminho certo!'} Acredite no seu potencial! üåü`;
}


export async function getInformationWithSearch(query: string): Promise<{ text: string; sources: GroundingChunk[] }> {
  // Verificar se IA est√° dispon√≠vel antes de tentar usar
  if (!isAiConfigured()) {
    console.log('IA n√£o dispon√≠vel, retornando mensagem padr√£o');
    return { text: "Informa√ß√µes n√£o dispon√≠veis no momento.", sources: [] };
  }

  try {
    const responseText = await tryMultipleModels(query);
    // Para esta fun√ß√£o, n√£o temos sources pois estamos usando tryMultipleModels
    return { text: responseText, sources: [] };
  } catch (error) {
    console.error("Error fetching information with search grounding:", error);
    const errorMessage = error instanceof Error ? error.message : "N√£o foi poss√≠vel buscar informa√ß√µes no momento.";
    return { text: errorMessage, sources: [] };
  }
}
